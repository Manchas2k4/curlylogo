#!/usr/bin/env python
# $Id: //depot/prj/logoscript/master/code/scriptmin#7 $
# extract scripts from XML (EG XHTML) page.

import xml.dom
import os
import select
import sys
import tempfile

import xml.dom.minidom
adom = xml.dom.minidom

def totext(n) :
  """
  Takes a node and converts its children to text.  This will
  generally only make sense if all the children are text nodes.  For
  example, an XHTML script element.
  """

  return reduce(lambda x, y: x + y,
                map(lambda x: x.nodeValue, n.childNodes))

def scripttext(n) :
  '''
  Returns the text of a script node.  The text is either in an
  external file (when src attribute is present) or inline (when src
  attribute is not present).
  '''

  if not n.attributes.has_key(u'src') :
    return totext(n)

  src = n.attributes[u'src'].value
  return open(src).read()

def getComments(e) :
  '''
  Return a list of all Comment Nodes in the DOM Node e (which will
  usually be an element or the document.
  '''

  def gc(e, l) :
    if e.nodeType == xml.dom.Node.COMMENT_NODE :
      l.append(e)
      # Comment Nodes have no children, so we can stop here.
      return l
    # We can use map here, because l is a mutated object.
    map(lambda x: gc(x, l), e.childNodes)

  a = []
  gc(e, a)
  return a

def orphan(e) :
  '''
  Make DOM Node e an orphan by removing it from its parent.
  '''

  e.parentNode.removeChild(e)

def xxform(s, p) :
  '''
  Transform string s by piping it through external program p.
  '''

  # using popen2.  Because nothing else allows us to control both the
  # input and the output.

  chin,chout = os.popen2(p)
  finish = False
  # accumulated output of child read back into this process.
  a = ''
  # list of descriptors to write to.
  wl = [chin]
  # Ideally the reads and writes in this loop should be non-blocking
  # (but they aren't). Because on some systems select(2) can lie.
  while not finish :
    i,o,_ = select.select([chout], wl, [], 2)
    for f in i :
      l = f.read()
      if l == '' :
        finish = True
      a += l
    for f in o :
      l = s[:256]
      s = s[256:]
      if l == '' :
        f.close()
        wl = []
      else :
        f.write(l)
  return a

def scriptmin(i, o, jsmin='jsmin') :
  '''
  Transforms XML file i to file o and attempts to make it smaller.
  All (internal) script elements all piped through jsmin (to reduce)
  them.  All XML Comment Nodes are removed.
  i and o can be names or file objects.'''

  try :
    i.read
  except AttributeError :
    i = open(i)
  doc = adom.parse(i)
  # Remove XML Comments
  map(orphan, getComments(doc))
  # Handle all script elements
  l = doc.getElementsByTagName('script')
  # Should probably check for JavaScript here
  for e in l :
    # Should check whether inlining external script is good idea.
    t = scripttext(e)
    c = doc.createCDATASection(xxform(t, jsmin))
    while(e.firstChild) :
      e.removeChild(e.firstChild)
    try :
      e.attributes.removeNamedItem(u'src')
    except :
      pass
    e.appendChild(c)
  t = doc.toxml()
  try :
    o.write
  except AttributeError :
    o = open(o, 'w')
  o.write(t)
  try :
    o.close()
  except :
    pass
  try :
    i.close()
  except :
    pass


# main stolen from Guido:
# http://www.artima.com/weblogs/viewpost.jsp?thread=4829

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def main(argv=None):
    import getopt
    if argv is None:
        argv = sys.argv
    try:
        # Keyword arguments to pass to scriptmin
        key = {}
        try:
            opts, args = getopt.getopt(argv[1:], "c:h", ["help"])
        except getopt.error, msg:
             raise Usage(msg)
        for o,a in opts :
          if o == '-c' :
            key['jsmin'] = a

        if len(args) == 0 :
          scriptmin(sys.stdin, sys.stdout, **key)
        elif len(args) == 1 :
          scriptmin(args[0], sys.stdout, **key)
        else :
          scriptmin(*args[0:2], **key)
    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, "for help use --help"
        return 2

if __name__ == "__main__":
    sys.exit(main())

