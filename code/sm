#!/usr/bin/env python
# $Id: //depot/prj/logoscript/master/code/scriptmin#4 $
# extract scripts from XML (EG XHTML) page.

from xml.dom import minidom
import os
import select
import sys
import tempfile

def doit(f) :
  doc = minidom.parse(f)
  return doc

def totext(n) :
  """Takes a node and converts its children to text.  This will
  generally only make sense if all the children are text nodes.  For
  example, an XHTML script element."""

  return reduce(lambda x, y: x + y,
                map(lambda x: x.nodeValue, n.childNodes))

def xxform(s, p) :
  '''Transform string s by piping it through external program p.'''

  # using popen2.  Because nothing else allows us to control both the
  # input and the output.

  chin,chout = os.popen2(p)
  finish = False
  # accumulated output of child read back into this process.
  a = ''
  # list of descriptors to write to.
  wl = [chin]
  # Ideally the reads and writes in this loop should be non-blocking
  # (but they aren't). Because on some systems select(2) can lie.
  while not finish :
    i,o,_ = select.select([chout], wl, [], 2)
    for f in i :
      l = f.read()
      if l == '' :
        finish = True
      a += l
    for f in o :
      l = s[:256]
      s = s[256:]
      if l == '' :
        f.close()
        wl = []
      else :
        f.write(l)
  return a

def scriptmin(i, o, jsmin='jsmin') :
  '''Copies file i to file o but runs all (internal) script elements
     through jsmin first.  i and o can be names or file objects.'''

  try :
    i.read
  except AttributeError :
    i = open(i)
  doc = minidom.parse(i)
  l = doc.getElementsByTagName('script')
  # Should probably check for JavaScript here
  s = filter(lambda x: not x.attributes.has_key(u'src'), l)
  for e in s :
    t = totext(e)
    c = doc.createCDATASection(xxform(t, jsmin))
    while(e.firstChild) :
      e.removeChild(e.firstChild)
    e.appendChild(c)
  t = doc.toxml()
  try :
    o.write
  except AttributeError :
    o = open(o, 'w')
  o.write(t)
  try :
    o.close()
  except :
    pass
  try :
    i.close()
  except :
    pass


# main stolen from Guido:
# http://www.artima.com/weblogs/viewpost.jsp?thread=4829

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def main(argv=None):
    import getopt
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "h", ["help"])
        except getopt.error, msg:
             raise Usage(msg)
        if len(args) == 0 :
          scriptmin(sys.stdin, sys.stdout)
        elif len(args) == 1 :
          scriptmin(args[0], sys.stdout)
        else :
          scriptmin(*args[0:2])
    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, "for help use --help"
        return 2

if __name__ == "__main__":
    sys.exit(main())

