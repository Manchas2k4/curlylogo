<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Curly Logo Gallery</title>
<style>
img {float: left;}
div.exhibit {clear: both;}
</style>
</head>
<body>

<h1>Curly Logo Gallery</h1>

<p>
The gallery illustrates both Curly Logo pictures and, to some extent,
programming techniques. Click on a picture to see it drawn in Curly
Logo for real.</p>

<div class='exhibit'>
<h3>Samanid Mancala</h3>
<a
href="../#%0D%0Acs%20setpc%20%22%23a94%20pu%20bk%20100%20pd%20setpw%2014%0D%0Arepeat%207%20%5B%20fd%20200%20rt%20360%20%2A%201.5%20/%207%20fd%2080%20rt%20360%20%2A%201.5%20/%207%20%5D%0D%0A"><img
src='mancala.png'></img></a>

<pre>
cs setpc "#a94 pu bk 100 pd setpw 14
repeat 7 [ fd 200 rt 360 * 1.5 / 7 fd 80 rt 360 * 1.5 / 7 ]
</pre>

<p>A sort of abstract Samanid Mancala. Note the {7/3} symmetry;
it arises from the fact that the <em>total</em> turn in each repetition
is 360 * 3 / 7 (consisting of two turns of 360 * 1.5 / 7 each).  Also
note the use of HTML style colour triples: <code>setpc "#a94</code>.
</p>
</div>

<div class='exhibit' id='dragon'>
<h3>The Dragon Curve</h3>
<a
href="../#to%20ldragon%20size%20level%0D%0Aifelse%20level%20%3D%200%20%5Bfd%20size%5D%20%5Bldragon%20size%20level%20-%201%20lt%2090%20rdragon%20size%20level%20-%201%5D%0D%0Aend%0D%0Ato%20rdragon%20size%20level%0D%0Aifelse%20level%20%3D%200%20%5Bfd%20size%5D%20%5Bldragon%20size%20level%20-%201%20rt%2090%20rdragon%20size%20level%20-%201%5D%0D%0Aend%0D%0Acs%20setpw%201%20pu%20fd%200.5%20rt%2090%20fd%200.5%20pd%0D%0Aldragon%202%2013%0D%0A"><img
src='dragon.png'></img></a>
<pre>
to ldragon size level
ifelse level = 0 [fd size] [ldragon size level - 1 lt 90 rdragon size level - 1]
end
to rdragon size level
ifelse level = 0 [fd size] [ldragon size level - 1 rt 90 rdragon size level - 1]
end
cs setpw 1 pu fd 0.5 rt 90 fd 0.5 pd
ldragon 2 13
</pre>
<p>The code is adapted from [<a
href="http://www.amazon.com/Turtle-Geometry-Mathematics-Artificial-Intelligence/dp/0262510375">TG</a>] (p93).  The early
versions of Curly Logo do not have any explicit way to return from a
procedure, hence having to use the slightly awkward two-branch <em>ifelse</em>.
There is
also no way to split lists onto more than one line, hence the awkwardly
long lines. Note the sequence of <em>half-steps</em> just before the
dragon is drawn, this places the turtle at the centre of a pixel which
means that the 1 pixel wide lines get drawn exactly.
</p>
<p>
Earlier versions of Curly Logo had
no real predicates, so used <a
href="http://drj11.wordpress.com/2007/05/25/iversons-convention-or-what-is-the-value-of-x-y/">Iverson's
Convention</a> instead of <code>level = 0</code>; faster but less clear.
</p>
</div>

<div class='exhibit'>
<h3>Kite and Dart Tiles</h3>
<a
href="../#to%20dart%20x%0Apd%20lt%2036%20fd%20x%20rt%20144%20fd%20x%20%2A%200.618033988%20lt%2036%20fd%20x%20%2A%200.618033988%20rt%20144%20fd%20x%20rt%20144%0Aend%0Ato%20kite%20x%0Apd%20lt%2036%20fd%20x%20rt%20108%20fd%20x%20%2A%200.618033988%20rt%2036%20fd%20x%20%2A%200.618033988%20rt%20108%20fd%20x%20rt%20144%0Aend%0Ato%20dartn%20n%20x%0Aifelse%20n%20%3D%200%20%5Bdart%20x%5D%20%5Bkiten%20n%20-%201%20x%20%2A%200.618033988%20lt%20144%20pu%20bk%20x%20dartn%20n%20-%201%20x%20%2A%200.618033988%20pu%20fd%20x%20rt%20144%5D%0Aend%0Ato%20lkiten%20n%20x%0Alt%2036%20pu%20fd%20x%20rt%20144%20kiten%20n%20x%20%2A%200.618033988%20lt%20144%20pu%20bk%20x%20rt%2036%0Aend%0Ato%20rkiten%20n%20x%0Art%2036%20pu%20fd%20x%20lt%20144%20kiten%20n%20x%20%2A%200.618033988%20rt%20144%20pu%20bk%20x%20lt%2036%0Aend%0Ato%20kiten%20n%20x%0Aifelse%20n%20%3D%200%20%5Bkite%20x%5D%20%5Blt%2036%20dartn%20n%20-%201%20x%20%2A%200.618033988%20rt%2036%20lkiten%20n%20-%201%20x%20rkiten%20n%20-%201%20x%5D%0Aend%0Ahome%20pu%20rt%2090%20fd%20250%20lt%2090%20bk%201500%20dartn%209%203000%0A"><img
src="kitedart.png"></img></a>
<p>My friend Dr Adam Chalcraft kindly contributed this to the
gallery.</p>
<p>Warning: May be slow on old machines or Firefox (it takes about 5
seconds on my 2006 era MacBook using Safari, but over 1 minute using
Firefox).</p>
<pre>
to dart x
pd lt 36 fd x rt 144 fd x * 0.618033988 lt 36 fd x * 0.618033988 rt 144 fd x rt 144
end
to kite x
pd lt 36 fd x rt 108 fd x * 0.618033988 rt 36 fd x * 0.618033988 rt 108 fd x rt 144
end
to dartn n x
ifelse n = 0 [dart x] [kiten n - 1 x * 0.618033988 lt 144 pu bk x dartn n - 1 x * 0.618033988 pu fd x rt 144]
end
to lkiten n x
lt 36 pu fd x rt 144 kiten n x * 0.618033988 lt 144 pu bk x rt 36
end
to rkiten n x
rt 36 pu fd x lt 144 kiten n x * 0.618033988 rt 144 pu bk x lt 36
end
to kiten n x
ifelse n = 0 [kite x] [lt 36 dartn n - 1 x * 0.618033988 rt 36 lkiten n - 1 x rkiten n - 1 x]
end
home pu rt 90 fd 250 lt 90 bk 1500 dartn 9 3000
</pre>
<p>It's an implementation of the aperiodic tiling documented by
Penrose.</p>
<p>
Adam's code exposed a bug in Curly Logo which turned out to be because I was
using SVG to
implement some geometrical calculations; SVG implementations use 32-bit
floats, doing the calculations in 64-bit doubles fixed the problems.
</p>
</div>

<div class='exhibit'>
<h3>Rainbow Ripple Star</h3>
<a
href="../#to%20star%20l%0Arepeat%205%20%5B%20fd%20l%20rt%20144%20%5D%0Aend%0Ato%20rainbow%20l%0Arepeat%207%20%5B%20setpw%2030%20-%204%20%2A%20repcount%20setpc%20repcount%20repeat%201%20l%20%5D%0Aend%0Art%2018%20rainbow%20%5B%20star%20120%20%5D%0A"><img
src='star.png'></img></a>
<pre>
to star l
repeat 5 [ fd l rt 144 ]
end
to rainbow l
repeat 7 [ setpw 30 - 4 * repcount setpc repcount repeat 1 l ]
end
rt 18 rainbow [ star 120 ]
</pre>
<p>
This shows several techniques.  The <em>star</em> procedure draws
a self-intersecting polygon, and shows a simple use of procedures with
parameters.  The <em>rainbow</em> procedure is <em>higher-order</em>, it
takes a list as an argument and repeatedly runs it.  <em>rainbow</em>
alters the pen width and pen colour in order to created its orange paint
on top of red paint effect.  Note the way <em>rainbow</em> uses
<code>repeat 1 l</code> to run the list <var>l</var>; this is because
its early version of Curly Logo doesn't provide a more direct way to do
that.
</p>
</div>

<div class='exhibit' id='sincos'>
<h3>Sine and Cosine Graphs</h3>
<a
href="../#to%20spike%20l%0Alt%2090%20pd%20fd%20l%20pu%20bk%20l%20rt%2090%0Aend%0Ato%20cosl%20angle%0Asetpc%20%22black%0Aspike%20180%20/%20pi%20%2A%20cos%20angle%0Aend%0Ato%20sinl%20angle%0Asetpc%20%22red%0Aspike%20180%20/%20pi%20%2A%20sin%20angle%0Aend%0Acs%20setpw%201%20pu%20rt%2090%20fd%200.5%20repeat%20360%20%5Bcosl%20repcount%20sinl%20repcount%20fd%201%5D%0A"><img
src='sincos.png'></img></a>
<pre>
to spike l
lt 90 pd fd l pu bk l rt 90
end
to cosl angle
setpc "black
spike 180 / pi * cos angle
end
to sinl angle
setpc "red
spike 180 / pi * sin angle
end
cs setpw 1 pu rt 90 fd 0.5 repeat 360 [cosl repcount sinl repcount fd 1]

</pre>
<p>Like <a href="#dragon">Dragon</a> this also uses sub-pixel positioning to get the correct
rendering.  Note that trigonometry functions act on degrees.
</p>
</div>

<div class='exhibit'>
<h3>Tadpole Chaos</h3>
<img src='tadpole.png'></img>
<pre>
to inspin side angle inc n
repeat n [ fd side rt angle + inc * repcount ]
end
cs inspin 2 2 pi 22222
</pre>
<p>This one takes far too long to run, so I haven't made the picture a
runnable link.  <em>inspin</em> is the bounded running time version of
INSPI from [TG] (Curly Logo currently has no way to stop the execution of
procedures so "infinite-loop" procedures are a Bad Idea).  Note that if
the 3rd argument, <em>inc</em>, to inspin is rational then the resulting
figure is either like a regular polygon, or like a straight line.
<em>pi</em> is irrational, but in the world of floating point arithmetic
on computers there are only rational numbers and rounding error.
</p>
</div>

</body>
</html>
